@use 'type';

// Heading levels
$level-size: type.$base-size;

// https://moderncss.dev/generating-font-size-css-rules-and-creating-a-fluid-type-scale/
@each $level in type.$levels {
  $level-size: $level-size * type.$size-ratio;

  // Output heading styles
  // Assign to element and create utility class
  h#{$level}, .h#{$level} {
    font-family: type.$serif-families;
    font-size: $level-size;
    font-weight: 500;
    line-height: calc(2px + 2ex + 2px);
    margin-bottom: 0.65em;

    // Limit in place based on testing -> smaller ratios are
    // prematurely or unnecessarily reduced
    @if (type.$size-ratio > 1.2) {
      // Fluid type styles

      // As of May 2020, min / max has better support than clamp
      // particularly for mobile devices

      // `unquote` is required due to built-in Sass min/max functions
      // incorrectly assuming intent

      // Remove unit for calculations
      $level-unitless: $level-size / ($level-size * 0 + 1);

      // Set minimum size to a percentage less than $level-size
      // Reduction is greater for large font sizes (> 4rem) to help
      // prevent overflow due to font-size on mobile devices
      $fluid-reduction: if($level-size > 4, 0.5, 0.33);
      $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

      // Prevent dropping lower than 1rem (body font-size)
      $fluid-min: if($fluid-min > type.$base-size, $fluid-min, 1);

      // Adjust max modifier slightly per level to prevent "same" size
      // or lower levels appaering larger than higher levels
      // 4vw was selected by testing from $type-ratios map, YMMV ðŸ™ƒ
      $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

      font-size: unquote(
        "min(max(#{$fluid-min}rem, #{$fluid-scaler}), #{$level-size})"
      );
    }
  }
}

